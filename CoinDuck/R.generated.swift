//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleSecurityApplicationGroups {
      static let groupNlChipchipCoinDuck = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.nl.chipchip.CoinDuck") ?? "group.nl.chipchip.CoinDuck"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `gtwalsheimpro-bold.ttf`.
    static let gtwalsheimproBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "gtwalsheimpro-bold", pathExtension: "ttf")
    /// Resource file `gtwalsheimpro-medium.ttf`.
    static let gtwalsheimproMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "gtwalsheimpro-medium", pathExtension: "ttf")
    /// Resource file `gtwalsheimpro-regular.ttf`.
    static let gtwalsheimproRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "gtwalsheimpro-regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "gtwalsheimpro-bold", withExtension: "ttf")`
    static func gtwalsheimproBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gtwalsheimproBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gtwalsheimpro-medium", withExtension: "ttf")`
    static func gtwalsheimproMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gtwalsheimproMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gtwalsheimpro-regular", withExtension: "ttf")`
    static func gtwalsheimproRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gtwalsheimproRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `GTWalsheimPro-Bold`.
    static let gtWalsheimProBold = Rswift.FontResource(fontName: "GTWalsheimPro-Bold")
    /// Font `GTWalsheimPro-Medium`.
    static let gtWalsheimProMedium = Rswift.FontResource(fontName: "GTWalsheimPro-Medium")
    /// Font `GTWalsheimPro`.
    static let gtWalsheimPro = Rswift.FontResource(fontName: "GTWalsheimPro")

    /// `UIFont(name: "GTWalsheimPro", size: ...)`
    static func gtWalsheimPro(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gtWalsheimPro, size: size)
    }

    /// `UIFont(name: "GTWalsheimPro-Bold", size: ...)`
    static func gtWalsheimProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gtWalsheimProBold, size: size)
    }

    /// `UIFont(name: "GTWalsheimPro-Medium", size: ...)`
    static func gtWalsheimProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gtWalsheimProMedium, size: size)
    }

    static func validate() throws {
      if R.font.gtWalsheimPro(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GTWalsheimPro' could not be loaded, is 'gtwalsheimpro-regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gtWalsheimProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GTWalsheimPro-Bold' could not be loaded, is 'gtwalsheimpro-bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gtWalsheimProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GTWalsheimPro-Medium' could not be loaded, is 'gtwalsheimpro-medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 35 images.
  struct image {
    /// Image `glyph_caret_down`.
    static let glyph_caret_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "glyph_caret_down")
    /// Image `glyph_caret_up`.
    static let glyph_caret_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "glyph_caret_up")
    /// Image `glyph_watchlisted`.
    static let glyph_watchlisted = Rswift.ImageResource(bundle: R.hostingBundle, name: "glyph_watchlisted")
    /// Image `herby`.
    static let herby = Rswift.ImageResource(bundle: R.hostingBundle, name: "herby")
    /// Image `icon-24-check`.
    static let icon24Check = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-24-check")
    /// Image `icon_alert`.
    static let icon_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_alert")
    /// Image `icon_arrow_left`.
    static let icon_arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_left")
    /// Image `icon_coin`.
    static let icon_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_coin")
    /// Image `icon_edit`.
    static let icon_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_edit")
    /// Image `icon_favorite`.
    static let icon_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_favorite")
    /// Image `icon_filter`.
    static let icon_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_filter")
    /// Image `icon_marketcap`.
    static let icon_marketcap = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_marketcap")
    /// Image `icon_more`.
    static let icon_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more")
    /// Image `icon_news`.
    static let icon_news = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_news")
    /// Image `icon_plus`.
    static let icon_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_plus")
    /// Image `icon_portfolio`.
    static let icon_portfolio = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_portfolio")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_settings`.
    static let icon_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings")
    /// Image `icon_share`.
    static let icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share")
    /// Image `icon_supply`.
    static let icon_supply = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_supply")
    /// Image `icon_volume`.
    static let icon_volume = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume")
    /// Image `jolie`.
    static let jolie = Rswift.ImageResource(bundle: R.hostingBundle, name: "jolie")
    /// Image `logo-color`.
    static let logoColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-color")
    /// Image `meimei`.
    static let meimei = Rswift.ImageResource(bundle: R.hostingBundle, name: "meimei")
    /// Image `pattern_pills_bc`.
    static let pattern_pills_bc = Rswift.ImageResource(bundle: R.hostingBundle, name: "pattern_pills_bc")
    /// Image `pattern_pills_bl`.
    static let pattern_pills_bl = Rswift.ImageResource(bundle: R.hostingBundle, name: "pattern_pills_bl")
    /// Image `pattern_pills_br`.
    static let pattern_pills_br = Rswift.ImageResource(bundle: R.hostingBundle, name: "pattern_pills_br")
    /// Image `pattern_pills_tc`.
    static let pattern_pills_tc = Rswift.ImageResource(bundle: R.hostingBundle, name: "pattern_pills_tc")
    /// Image `pattern_pills_tl`.
    static let pattern_pills_tl = Rswift.ImageResource(bundle: R.hostingBundle, name: "pattern_pills_tl")
    /// Image `pattern_pills_tr`.
    static let pattern_pills_tr = Rswift.ImageResource(bundle: R.hostingBundle, name: "pattern_pills_tr")
    /// Image `puang`.
    static let puang = Rswift.ImageResource(bundle: R.hostingBundle, name: "puang")
    /// Image `puddles`.
    static let puddles = Rswift.ImageResource(bundle: R.hostingBundle, name: "puddles")
    /// Image `temp_graph_small`.
    static let temp_graph_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_graph_small")
    /// Image `temp_graph`.
    static let temp_graph = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_graph")
    /// Image `yuki`.
    static let yuki = Rswift.ImageResource(bundle: R.hostingBundle, name: "yuki")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "glyph_caret_down", bundle: ..., traitCollection: ...)`
    static func glyph_caret_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glyph_caret_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "glyph_caret_up", bundle: ..., traitCollection: ...)`
    static func glyph_caret_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glyph_caret_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "glyph_watchlisted", bundle: ..., traitCollection: ...)`
    static func glyph_watchlisted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glyph_watchlisted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "herby", bundle: ..., traitCollection: ...)`
    static func herby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.herby, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-24-check", bundle: ..., traitCollection: ...)`
    static func icon24Check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon24Check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_alert", bundle: ..., traitCollection: ...)`
    static func icon_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_left", bundle: ..., traitCollection: ...)`
    static func icon_arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_coin", bundle: ..., traitCollection: ...)`
    static func icon_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_coin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_edit", bundle: ..., traitCollection: ...)`
    static func icon_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_favorite", bundle: ..., traitCollection: ...)`
    static func icon_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_filter", bundle: ..., traitCollection: ...)`
    static func icon_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_marketcap", bundle: ..., traitCollection: ...)`
    static func icon_marketcap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_marketcap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more", bundle: ..., traitCollection: ...)`
    static func icon_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_news", bundle: ..., traitCollection: ...)`
    static func icon_news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_news, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_plus", bundle: ..., traitCollection: ...)`
    static func icon_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_portfolio", bundle: ..., traitCollection: ...)`
    static func icon_portfolio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_portfolio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings", bundle: ..., traitCollection: ...)`
    static func icon_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share", bundle: ..., traitCollection: ...)`
    static func icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_supply", bundle: ..., traitCollection: ...)`
    static func icon_supply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_supply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume", bundle: ..., traitCollection: ...)`
    static func icon_volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jolie", bundle: ..., traitCollection: ...)`
    static func jolie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jolie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo-color", bundle: ..., traitCollection: ...)`
    static func logoColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "meimei", bundle: ..., traitCollection: ...)`
    static func meimei(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meimei, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pattern_pills_bc", bundle: ..., traitCollection: ...)`
    static func pattern_pills_bc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pattern_pills_bc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pattern_pills_bl", bundle: ..., traitCollection: ...)`
    static func pattern_pills_bl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pattern_pills_bl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pattern_pills_br", bundle: ..., traitCollection: ...)`
    static func pattern_pills_br(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pattern_pills_br, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pattern_pills_tc", bundle: ..., traitCollection: ...)`
    static func pattern_pills_tc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pattern_pills_tc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pattern_pills_tl", bundle: ..., traitCollection: ...)`
    static func pattern_pills_tl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pattern_pills_tl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pattern_pills_tr", bundle: ..., traitCollection: ...)`
    static func pattern_pills_tr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pattern_pills_tr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "puang", bundle: ..., traitCollection: ...)`
    static func puang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.puang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "puddles", bundle: ..., traitCollection: ...)`
    static func puddles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.puddles, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_graph", bundle: ..., traitCollection: ...)`
    static func temp_graph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_graph, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_graph_small", bundle: ..., traitCollection: ...)`
    static func temp_graph_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_graph_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yuki", bundle: ..., traitCollection: ...)`
    static func yuki(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yuki, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizations` struct is generated, and contains static references to 18 localization keys.
    struct localizations {
      /// en translation: About this app
      ///
      /// Locales: en
      static let settings_setting_aboutApp = Rswift.StringResource(key: "settings_setting_aboutApp", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Appearance
      ///
      /// Locales: en
      static let settings_setting_theme = Rswift.StringResource(key: "settings_setting_theme", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Automatic
      ///
      /// Locales: en
      static let settings_setting_theme_system = Rswift.StringResource(key: "settings_setting_theme_system", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en
      static let ui_action_back = Rswift.StringResource(key: "ui_action_back", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en
      static let ui_action_close = Rswift.StringResource(key: "ui_action_close", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copyright © CoinDuck
      ///
      /// Locales: en
      static let ui_copyright = Rswift.StringResource(key: "ui_copyright", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: en
      static let settings_setting_currency = Rswift.StringResource(key: "settings_setting_currency", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: en
      static let settings_setting_theme_dark = Rswift.StringResource(key: "settings_setting_theme_dark", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en
      static let locale = Rswift.StringResource(key: "locale", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error: Something went wrong.
      ///
      /// Locales: en
      static let ui_state_error = Rswift.StringResource(key: "ui_state_error", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Information
      ///
      /// Locales: en
      static let settings_section_information = Rswift.StringResource(key: "settings_section_information", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en
      static let settings_setting_language = Rswift.StringResource(key: "settings_setting_language", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en
      static let settings_setting_theme_light = Rswift.StringResource(key: "settings_setting_theme_light", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en
      static let ui_state_loading = Rswift.StringResource(key: "ui_state_loading", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Preferences
      ///
      /// Locales: en
      static let settings_section_preferences = Rswift.StringResource(key: "settings_section_preferences", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let settings_pageTitle = Rswift.StringResource(key: "settings_pageTitle", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Text.
      ///
      /// Locales: en
      static let content_aboutApp = Rswift.StringResource(key: "content_aboutApp", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Version
      ///
      /// Locales: en
      static let ui_version = Rswift.StringResource(key: "ui_version", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: About this app
      ///
      /// Locales: en
      static func settings_setting_aboutApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_aboutApp", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_aboutApp"
        }

        return NSLocalizedString("settings_setting_aboutApp", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Appearance
      ///
      /// Locales: en
      static func settings_setting_theme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_theme", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_theme"
        }

        return NSLocalizedString("settings_setting_theme", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Automatic
      ///
      /// Locales: en
      static func settings_setting_theme_system(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_theme_system", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_theme_system"
        }

        return NSLocalizedString("settings_setting_theme_system", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en
      static func ui_action_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ui_action_back", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "ui_action_back"
        }

        return NSLocalizedString("ui_action_back", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en
      static func ui_action_close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ui_action_close", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "ui_action_close"
        }

        return NSLocalizedString("ui_action_close", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Copyright © CoinDuck
      ///
      /// Locales: en
      static func ui_copyright(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ui_copyright", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "ui_copyright"
        }

        return NSLocalizedString("ui_copyright", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: en
      static func settings_setting_currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_currency", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_currency"
        }

        return NSLocalizedString("settings_setting_currency", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: en
      static func settings_setting_theme_dark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_theme_dark", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_theme_dark"
        }

        return NSLocalizedString("settings_setting_theme_dark", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en
      static func locale(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("locale", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "locale"
        }

        return NSLocalizedString("locale", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Error: Something went wrong.
      ///
      /// Locales: en
      static func ui_state_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ui_state_error", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "ui_state_error"
        }

        return NSLocalizedString("ui_state_error", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Information
      ///
      /// Locales: en
      static func settings_section_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_section_information", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_section_information"
        }

        return NSLocalizedString("settings_section_information", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en
      static func settings_setting_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_language", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_language"
        }

        return NSLocalizedString("settings_setting_language", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en
      static func settings_setting_theme_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_setting_theme_light", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_setting_theme_light"
        }

        return NSLocalizedString("settings_setting_theme_light", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en
      static func ui_state_loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ui_state_loading", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "ui_state_loading"
        }

        return NSLocalizedString("ui_state_loading", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Preferences
      ///
      /// Locales: en
      static func settings_section_preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_section_preferences", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_section_preferences"
        }

        return NSLocalizedString("settings_section_preferences", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func settings_pageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_pageTitle", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "settings_pageTitle"
        }

        return NSLocalizedString("settings_pageTitle", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Text.
      ///
      /// Locales: en
      static func content_aboutApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("content_aboutApp", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "content_aboutApp"
        }

        return NSLocalizedString("content_aboutApp", tableName: "Localizations", bundle: bundle, comment: "")
      }

      /// en translation: Version
      ///
      /// Locales: en
      static func ui_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ui_version", tableName: "Localizations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizations", preferredLanguages: preferredLanguages) else {
          return "ui_version"
        }

        return NSLocalizedString("ui_version", tableName: "Localizations", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
